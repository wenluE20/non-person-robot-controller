#include "ros/ros.h"
#include "geometry_msgs/Twist.h"
#include <opencv2/opencv.hpp>
#include <cv_bridge/cv_bridge.h>

using namespace cv;

enum CameraState
{
 COMPUTER = 0,
 ZED,
 REALSENSE
};

CameraState state = ZED;
Mat frame_msg;

void rcvCameraCallBack(const sensor_msgs::Image::ConstPtr& img)
{
 cv_bridge::CvImageConstPtr cv_ptr;
 cv_ptr = cv_bridge::toCvShare(img, 
 sensor_msgs::image_encodings::BGR8);
 frame_msg = cv_ptr->image;
}

int main(int argc, char ** argv)
{
 ros::init(argc, argv, "robot_camera");
 ros::NodeHandle n;
 ros::Subscriber camera_sub;
 VideoCapture capture;
 
 if(state == COMPUTER)
 {
   capture.open(0); 
 
   if (!capture.isOpened())
 {
   printf("电脑摄像头没有正常打开\n");
   return 0;
 }
 
   waitKey(1000);
 }
 
 else if(state == ZED)
 {
 capture.open(4); 
 
   if (!capture.isOpened())
 {
 printf("ZED 摄像头没有正常打开\n");
 return 0;
 }
 
   waitKey(1000);
 }
 
 else if(state == REALSENSE)
 {
 camera_sub = 
n.subscribe("/camera/color/image_raw",1,rcvCameraCallBack);

   waitKey(1000);
}

  Mat frame;//当前帧图片
 
  ros::Rate loop_rate(10); // 设置循环频率为 10Hz
 
  while (ros::ok())
 {
 if(state == COMPUTER)
 {
 capture.read(frame);
 
   if (frame.empty())
 {
 printf("没有获取到电脑图像\n");
 continue;
 }
 }
 
 else if(state == ZED)
 {
 capture.read(frame);
 
   if (frame.empty())
 {
 printf("没有获取到 ZED 图像\n");
 continue;
 }
 
   frame = frame(cv::Rect(0,0,frame.cols/2,frame.rows));//截取 zed
的左目图片
 }
 
 else if(state == REALSENSE)
 {
 if(frame_msg.cols == 0)
 {
 printf("没有获取到 realsense 图像\n");
 ros::spinOnce();
 continue;
 }

   frame = frame_msg;
 }
 
   imshow("frame",frame); //显示图像
   ros::spinOnce(); // 处理回调函数
   waitKey(5);
 
   loop_rate.sleep(); // 控制循环速率
 }


  
}
